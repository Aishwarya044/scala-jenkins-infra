#!/usr/bin/env bash

baseDir=${WORKSPACE-`pwd`}
scriptsDir="$baseDir/scripts"
. $scriptsDir/common

# adapted from the boostrap script in scala/scala
sbtArgs="-no-colors -ivy $baseDir/ivy2 -Dsbt.global.base=$HOME/.sbt/0.13 -sbt-dir $HOME/.sbt/0.13"

cd $baseDir

function containsCommit(){
  local mb=$(git merge-base $1 HEAD 2> /dev/null)
  [[ $1 != "" && $mb == $1 ]]
}

# - changed version number format to 2.12.2-bin-sha7
# - changed relese repo from "scala-release-temp" to "scala-integration" (for "quick" and modules)
# - new $integrationRepoUrl variable to overwrite that repo url
# - $releaseTempRepoUrl is unchanged, still used to published "starr" and "locker"
rNewVersionFormat212=8dc0dd4582314d99d5a4fc427933116339b497ed
rNewVersionFormat211=not-yet-backported
function fNewVersionFormat(){
  source $scriptsDir/jobs/integrate/bootstrap
}

function setNewScalaVersionStyle(){
  publishToSonatype="no"

  # change to use `generateBuildCharacterPropertiesFile` to get the scala version
  local useBuildCharacter=e2b6c7b608b82fca5343f6d09236c2b48b5d824d
  if containsCommit $useBuildCharacter; then
    $SBT_CMD $sbtArgs 'set baseVersionSuffix in Global := "UNUSED-SUFFIX"' generateBuildCharacterPropertiesFile
    parseScalaProperties "buildcharacter.properties"
    SCALA_VER_BASE=$maven_version_base
  else
    parseScalaProperties "build.number"
    SCALA_VER_BASE="$version_major.$version_minor.$version_patch"
  fi

  local shaSuffix=$(git rev-parse HEAD | cut -c1-7)
  local cross="bin"
  if [[ $SCALA_VER_BASE =~ ^.*\.0$ ]]; then
    cross="pre"
  fi
  SCALA_VER_SUFFIX="-$cross-$shaSuffix"
}

# - introducded the $releaseTempRepoUrl variable
rReleaseTempVarName=706d68f863ebffb0f63811afe0835c5f975ba225
function fReleaseTempVarName(){
  setNewScalaVersionStyle
  releaseTempRepoUrl="https://scala-ci.typesafe.com/artifactory/scala-integration/"
  source $scriptsDir/jobs/integrate/bootstrap
}

# TODO: support older revisions

# main
if containsCommit $rNewVersionFormat212 || containsCommit $rNewVersionFormat211; then
  fNewVersionFormat

elif containsCommit $rReleaseTempVarName; then
  fReleaseTempVarName

else
  echo "Cannot build revision $(git rev-parse HEAD)"
  exit 42

fi
