---
- name: Create jenkins homedir
  file: path={{jenkins_home}} state=directory mode="0755"
  
- name: Mount jenkins home
  mount:
    src: "{{ec2_vol_jenkins.device_name}}"
    path: "{{jenkins_home}}"
    fstype: ext4
    opts: noatime
    state: mounted
  notify: daemon reload
  tags:
    - ec2

- name: Create user
  user: name={{jenkins_user}} home={{jenkins_home}}

- name: Chmod jenkins homedir
  file: path={{jenkins_home}} state=directory mode="0755" owner={{jenkins_user}}

- name: Add the jenkins gpg key
  apt_key:
    url: "https://pkg.jenkins.io/debian/jenkins.io.key"
    state: present

- name: Add apt repo for jenkins
  apt_repository:
    repo: "deb https://pkg.jenkins.io/debian binary/"
    state: present

- name: Create jenkins dirs
  file: path={{item}} state=directory owner="{{jenkins_user}}" mode="0755"
  with_items:
      - "{{jenkins_home}}/.ssh"

- name: Worker ssh key pairs
  become_user: "{{jenkins_user}}"
  become: yes
  shell: ssh-keygen -q -t rsa -b 4096 -f "{{jenkins_home}}/.ssh/{{item}}" -N '' -C "{{item}} adriaan+jenkins@lightbend.com"
  args:
    creates: "{{jenkins_home}}/.ssh/{{item}}"
  with_items:
      - id_worker
      - id_worker_publisher
      - id_worker_kalles    # TODO: copy manually to host's authorized_keys
      - id_worker_windows   # TODO: copy manually to host's authorized_keys

- name: Install jenkins
  apt:
      name: jenkins
      state: present
      update_cache: yes

# only do this on initial setup, because subsequent manual steps will modify it
- name: Copy jenkins config
  become_user: "{{jenkins_user}}"
  become: yes
  synchronize:
    src: ../files/
    dest: "{{jenkins_home}}"
    checksum: true
  notify: restart jenkins

- name: Jenkins plugins
  become: false
  delegate_to: localhost
  shell: for plugin in copyartifact credentials cygpath dashboard-view git github github-api github-oauth greenballs job-dsl logfilesizechecker mailer parameterized-trigger ssh-slaves ansicolor build-timeout email-ext groovy notification rebuild ssh-credentials throttle-concurrents; do ssh -p 8022 admin@scala-ci.typesafe.com install-plugin $plugin; done

- name: Restart jenkins
  become: false
  delegate_to: localhost
  shell: ssh -p 8022 admin@scala-ci.typesafe.com restart

- name: Delay 20s and wait for Jenkins CLI to come up
  wait_for:
    port: 8022
    host: 'scala-ci.typesafe.com'
    search_regex: SSH-2.0-SSHD-CORE
    delay: 20
  connection: local

- name: Configure github oauth
  no_log: true
  vars:
    - script: "
// for use with ssh -p 8022 admin@scala-ci.typesafe.com groovysh
import jenkins.model.Jenkins
import org.jenkinsci.plugins.*
Jenkins.instance.setSecurityRealm(new GithubSecurityRealm('https://github.com/', 'https://api.github.com', '{{github_api_client_id}}', '{{github_api_client_secret}}', 'read:org,user:email'))
Jenkins.instance.setAuthorizationStrategy(new GithubAuthorizationStrategy('adriaanm, retronym, lrytz, SethTisue, szeiger, dwijnand', true, true, false, 'scala', true, false, true, true))
Jenkins.instance.save()"
  become: false
  delegate_to: localhost
  shell: echo "{{script}}" | ssh -p 8022 admin@scala-ci.typesafe.com groovysh


# - manual step: install the ec2-start-stop plugin (~/git/ec2-start-stop/target/ec2-start-stop.hpi)

