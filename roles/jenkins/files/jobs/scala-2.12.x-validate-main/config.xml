<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.17">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>true</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>repo_user</name>
          <description></description>
          <defaultValue>scala</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repo_name</name>
          <description></description>
          <defaultValue>scala</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repo_ref</name>
          <description></description>
          <defaultValue>2.12.x</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>prDryRun</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>antBuildArgs</name>
          <description>Extra arguments for the ant build. For example, `-Dscalac.args=\&quot;-Xcheckinit\&quot;`.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>testExtraArgs</name>
          <description>Extra arguments for partest. For example, `-Dpartest.scalac_opts=\&quot;-Xcheckinit\&quot;`.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>testTarget</name>
          <description>Ant test targets to call. The default is &apos;test.core docs.done&apos;.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>_scabot_pr</name>
          <description>For internal use by Scabot.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>_scabot_last</name>
          <description>For internal use by Scabot.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.44">
    <script>//
// This is written using the &quot;Scripted Pipeline&quot; (https://jenkins.io/doc/book/pipeline/syntax/#scripted-pipeline)
// not the declarative DSL.
//
// Useful docs: https://jenkins.io/doc/pipeline/steps/workflow-basic-steps

//
import java.nio.file.*

node {
    branch = &apos;2.12.x&apos;
    // TODO would be cleaner to construct this from params, by my groovy-fu failed me.
    paramList = [
        [$class: &apos;StringParameterValue&apos;, name: &apos;repo_user&apos;, value: &quot;${repo_user}&quot;],
        [$class: &apos;StringParameterValue&apos;, name: &apos;repo_name&apos;, value: &quot;${repo_name}&quot;],
        [$class: &apos;StringParameterValue&apos;, name: &apos;repo_ref&apos;, value: &quot;${repo_ref}&quot;],
        [$class: &apos;StringParameterValue&apos;, name: &apos;prDryRun&apos;, value: &quot;${prDryRun}&quot;],
        [$class: &apos;StringParameterValue&apos;, name: &apos;antBuildArgs&apos;, value: &quot;${antBuildArgs}&quot;],
        [$class: &apos;StringParameterValue&apos;, name: &apos;testExtraArgs&apos;, value: &quot;${testExtraArgs}&quot;],
        [$class: &apos;StringParameterValue&apos;, name: &apos;testTarget&apos;, value: &quot;${testTarget}&quot;],
        [$class: &apos;StringParameterValue&apos;, name: &apos;_scabot_pr&apos;, value: &quot;${_scabot_pr}&quot;],
        [$class: &apos;StringParameterValue&apos;, name: &apos;_scabot_last&apos;, value: &quot;${_scabot_last}&quot;]
    ]
    testParamList = paramList // we&apos;ll add after `publishCore`

    stage(&apos;Publish Core&apos;) {
        projectName = &quot;scala-$branch-validate-publish-core&quot;
        built = build(job: projectName, parameters: paramList)

        // Copy version.properties to this workspace

        // TODO: could this be done more cleanly by having publish-core
        //       &quot;stash&quot; the artifact into the the triggering upstream build (this pipeline)
        //       https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#code-stash-code-stash-some-files-to-be-used-later-in-the-build

        artifactName = &quot;jenkins.properties&quot;
        copyArtifacts(projectName: projectName, selector: specific(&quot;${built.number}&quot;), filter: &quot;**/$artifactName&quot;, flatten: true);
        versionProps = Paths.get(&quot;${env.WORKSPACE}/$artifactName&quot;)
        if (!Files.exists(versionProps)) {
          error(&quot;Error: publish-core did not publish \&quot;$artifactName\&quot; artifact, unable to proceed.&quot;)
        }

        // Note the scala version parameter for use in the subequent build stage
        testParamList = testParamList + [ &quot;scalaVersion&quot; : readProperty(versionProps, &quot;maven.version.number&quot;) ]
    }
    stage(&apos;Testing&apos;) {
        parallel (
            validatetest: { node {
                build(job: &quot;scala-$branch-validate-test&quot;, parameters: testParamList)
            }},
            ide: { node {
                build(job: &quot;scala-$branch-integegrate-ide&quot;, parameters: testParamList)
            }}
        )
    }
}

def readFile(Path path) {
    return Files.readAllLines(path).stream().collect(java.util.stream.Collectors.joining(&quot;\n&quot;))
}


def readProperty(Path path, String prop) {
    reader = Files.newBufferedReader(path)
    try {
        props = new java.util.Properties()
        props.load(Files.newBufferedReader(path))
        return props[prop]
    } finally {
        reader.close()
    }
}

</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>